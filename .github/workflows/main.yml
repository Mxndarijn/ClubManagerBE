name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Get project name and version
        id: gradle-info
        run: |
          echo "PROJECT_NAME=$(./gradlew -q printProjectName)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(./gradlew -q printVersion)" >> $GITHUB_ENV

      - name: Run Spring Boot application
        run: java -jar ./build/libs/${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}.jar &
        env:
          SPRING_PROFILES_ACTIVE: dev

      - name: Wait for application to start
        run: sleep 20  # Pas dit aan op de werkelijke opstarttijd van je app

      - name: Execute tests
        run: ./gradlew test
        
      - name: Define Docker Image Name
        run: echo "IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ github.run_number }}" >> $GITHUB_ENV


      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}
      - name: Build Docker Image
        run: |
          docker build -t  ${{ env.IMAGE_NAME }} \
          --build-arg JAR_FILE=./build/libs/${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}.jar \
          --build-arg SPRING_PROFILES_ACTIVE=prod \
          .
      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update Azure Container App
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az containerapp update \
            --name ${{vars.AZURE_CONTAINERAPP_NAME}} \
            --resource-group ${{vars.AZURE_RESOURCE_GROUP}} \
            --image docker.io/${{ env.IMAGE_NAME }}

      - name: Logout from Azure
        run: az logout

      - name: Error handling
        if: failure()
        run: echo "Deployment failed. Please check the logs above."
