extend type Query {
    getMyProfile: User

    #    Association Details
    getAssociationDetails(associationID: ID!): Association
    getAssociationStatistics(associationID: ID!): AssociationStatisticsDTO

    getAssociationRoles: [AssociationRole]!
    getAllWeapons(associationID: ID!): [Weapon]!
    getAllWeaponTypes(associationID: ID!): [WeaponType]!

    getWeaponMaintenancesBetween(associationID: ID!, startDate: LocalDateTime!, endDate: LocalDateTime!): GetWeaponMaintenancesDTO

    getAllColorPresets: [ColorPreset]

    getTracksOfAssociation(associationID: ID!): [Track]!
    getReservationsBetween(associationID: ID!, startDate: LocalDateTime!, endDate: LocalDateTime!): GetReservationResponseDTO

    validateToken: DefaultBooleanResponseDTO

}

type Mutation {
    createAssociation: Association

    #    Invites
    sendAssociationInvite(dto: CreateAssociationInviteInput!): SendAssociationInviteResponseDTO
    removeAssociationInvite(inviteId: AssociationInviteInput!): DefaultBooleanResponseDTO
    changeUserAssociation(changeUserAssociationDTO: ChangeUserAssociationDTO!): ChangeUserAssociationResponse
    removeUserAssociation(deleteUserAssociationDTO: DeleteUserAssociationDTO!): DefaultBooleanResponseDTO
    acceptAssociationInvite(inviteId: AssociationInviteInput!): DefaultBooleanResponseDTO
    rejectAssociationInvite(inviteId: AssociationInviteInput!): DefaultBooleanResponseDTO

    #    User Profile
    updateMyProfile(dto: UpdateMyProfileDTO!) : DefaultBooleanResponseDTO
    updateMyProfilePicture(dto: ChangeProfilePictureDTO!) : DefaultBooleanResponseDTO

    #    Association settings
    updateAssociationPicture(dto: ChangeProfilePictureDTO!, associationID: ID!): DefaultBooleanResponseDTO
    updateAssociationSettings(dto: UpdateAssociationDTO!, associationID: ID!): DefaultBooleanResponseDTO

    #    Create Weapon
    createWeapon(dto: CreateWeaponDTO!, associationID: ID!): CreateWeaponResponseDTO

    #   Weapon Maintenance
    createWeaponMaintenance(dto: CreateWeaponMaintenanceDTO!): CreateWeaponMaintenanceDTOResponse
    changeWeaponMaintenance(dto: ChangeWeaponMaintenanceDTO!): CreateWeaponMaintenanceDTOResponse
    deleteWeaponMaintenance(associationID: ID!,maintenanceID: ID!): DefaultBooleanResponseDTO

    createTrackForAssociation(associationID: ID!, dto: TrackDTO!):  CreateTrackResponseDTO
    editTrackForAssociation(associationID: ID!, dto: TrackDTO!, trackID: ID!):  CreateTrackResponseDTO
    deleteTrackForAssociation(associationID: ID!, trackID: ID!):  DefaultBooleanResponseDTO


    # Reservation
    createReservations(dto: CreateReservationDTO!): CreateReservationResponseDTO
    editReservationSeries(dto: EditReservationSeriesDTO!): CreateReservationResponseDTO
    deleteReservationSeries(seriesID: ID!, associationID: ID!): DefaultBooleanResponseDTO
    deleteReservation(reservationID: ID!, associationID: ID!): DefaultBooleanResponseDTO

    login(loginRequest: LoginDTOInput!): DefaultBooleanResponseDTO
    register(registerRequest: RegisterDTOInput!): DefaultBooleanResponseDTO
}

input LoginDTOInput {
    email: String!
    password: String!
}

input RegisterDTOInput {
    fullName: String!
    email: String!
    password: String!
}


enum ReservationRepeat {
    NO_REPEAT
    DAY
    WEEK
}

type GetReservationResponseDTO {
    success: Boolean
    reservations: [Reservation]
}



input CreateReservationDTO {
    title: String!
    description: String!
    startTime: LocalDateTime!
    endTime: LocalDateTime!
    maxSize: Int!
    repeatType: ReservationRepeat!
    repeatUntil: LocalDateTime
    customDaysBetween: Int
    associationID: ID!
    tracks: [ID]!
    allowedWeaponTypes: [ID]!
    colorPreset: ID!
}


scalar LocalDateTime

type GetWeaponMaintenancesDTO {
    success: Boolean,
    maintenances: [WeaponMaintenance]
}

type WeaponMaintenance {
    id: ID!
    association: PrivateAssociation
    startDate: LocalDateTime
    endDate: LocalDateTime
    title: String
    colorPreset: ColorPreset
    description: String
    weapon: Weapon
}

type CreateTrackResponseDTO {
    success: Boolean!
    message: String
    track: Track
}
type PrivateAssociation {
    id: ID!
    name: String!
}

type ColorPreset {
    id: ID!
    colorName: String!
    primaryColor: String!
    secondaryColor: String!
}

input TrackDTO {
    name: String!
    description: String!
    allowedWeaponTypes: [ID]!
}

input ChangeUserAssociationDTO {
    userUUID: ID!
    associationUUID: ID!
    associationRoleUUID: ID!
}

input DeleteUserAssociationDTO {
    userUUID: ID!
    associationUUID: ID!
}

input CreateAssociationInviteInput {
    userEmail: String!
    associationUUID: ID!
    associationRoleUUID: ID!
}

input CreateWeaponDTO {
    weaponName: String!
    weaponType: ID!
    weaponStatus: String!
}

input AssociationInviteInput {
    userUUID: ID!
    associationUUID: ID!
}

type CreateWeaponMaintenanceDTOResponse {
    success: Boolean!
    message: String!
    maintenance: WeaponMaintenance
}

type ChangeUserAssociationResponse {
    success: Boolean!
    userAssociation: UserAssociation
}

type DefaultBooleanResponseDTO {
    success: Boolean!
    message: String
}

type CreateWeaponResponseDTO {
    success: Boolean!
    message: String
    weapon: Weapon
}

type SendAssociationInviteResponseDTO {
    success: Boolean!
    message: String
    associationInvite: AssociationInvite
}

input UpdateAssociationDTO {
    associationName: String!
    welcomeMessage: String!
    contactEmail: String!
}

input CreateWeaponMaintenanceDTO {
    weaponUUID: ID!
    colorPresetUUID: ID!
    title: String!
    description: String!
    associationUUID: ID!
    startDate: LocalDateTime!
    endDate: LocalDateTime!
}

input ChangeWeaponMaintenanceDTO {
    weaponUUID: ID!
    colorPresetUUID: ID!
    title: String!
    description: String!
    associationUUID: ID!
    weaponMaintenanceUUID: ID!
    startDate: LocalDateTime!
    endDate: LocalDateTime!
}


