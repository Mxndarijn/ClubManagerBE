type Query {
    getMyAssociations: [Association]
    getMyPermissions: [AccountPermission]
    getMyAssociationPermissions: [AssociationPermissionDTO]
    getMyProfile: User
}

type Mutation {
    createAssociation: Association
    sendAssociationInvite(input: CreateAssociationInviteInput!): AssociationInvite

}

input CreateAssociationInviteInput {
    userUUID: ID!
    associationUUID: ID!
    associationRoleUUID: ID!
}

type User {
    id: ID!
    userName: String!
    password: String!
    email: String!
    fullName: String!
    knsaMembershipNumber: Int
    knsaMemberSince: String
    image: Image
    associations: [UserAssociation]
    presences: [UserPresence]
    reservations: [Reservation]
    roles: [AccountRole]
    associationUserRoles: [AssociationUserRole]
}
type Association {
    id: ID!
    name: String!
    image: Image
    welcomeMessage: String
    contactEmail: String
    active: Boolean!
    users: [UserAssociation]
    associationUserRoles: [AssociationUserRole]
}

type UserAssociation {
    id: UserAssociationId!
    user: User!
    association: Association
    memberSince: String
}

type UserAssociationId {
    userId: ID!
    associationId: ID!
}


type Image {
    id: ID!
    encoded: String!
}
type AccountPermission {
    id: ID!
    name: String!
    description: String
    roles: [AccountRole]
}
type AccountRole {
    id: ID!
    name: String!
    users: [User]
    permissions: [AccountPermission]
}

type AssociationPermission {
    id: ID!
    name: String!
    description: String
    roles: [AssociationRole]
}
type AssociationRole {
    id: ID!
    name: String!
    permissions: [AssociationPermission]
    associationUserRoles: [AssociationUserRole]
}
type AssociationUserRole {
    id: AssociationUserRoleId!
    user: User!
    role: AssociationRole!
    association: Association!
}

type AssociationUserRoleId {
    userId: ID!
    roleId: ID!
    associationId: ID!
}
type Competition {
    id: ID!
    name: String!
    description: String
    association: Association
    startDate: String
    endDate: String
    competitionUsers: [CompetitionUser]
}
type CompetitionUser {
    id: CompetitionUserId!
    user: User!
    competition: Competition!
    date: String
}

type CompetitionUserId {
    userId: ID!
    competitionId: ID!
}
type CompetitionUserScore {
    id: ID!
    competitionUser: CompetitionUser!
    score: Int!
}
type Reservation {
    id: ID!
    association: Association
    date: String
    title: String
    description: String
    status: ReservationStatus
    maxSize: Int
    users: [User]
    reservationSerie: ReservationSeries
}

enum ReservationStatus {
    IDK
    # Voeg hier de andere enum waarden toe
}

type ReservationSeries {
    id: ID!
    reservations: [Reservation]
}
type Track {
    id: ID!
    name: String
    description: String
    association: Association
    allowedWeaponTypes: [WeaponType]
}
type UserPresence {
    id: ID!
    user: User
    association: Association
    date: String
}

type Weapon {
    id: ID!
    name: String
    association: Association
    type: WeaponType
    status: WeaponStatus
}

enum WeaponStatus {
    ACTIVE
    INACTIVE
    MAINTENANCE
}

type WeaponType {
    id: ID!
    name: String
    tracks: [Track]
}


type AssociationPermissionDTO {
    permissions: [String]
    associationUUID: ID
    associationName: String
}

type AssociationInvite {
    id: AssociationInviteId!
    user: User!
    association: Association!
    associationRole: AssociationRole
}

type AssociationInviteId {
    userId: ID!
    associationId: ID!
}