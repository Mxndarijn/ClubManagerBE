
extend type Query {
    getMyProfile: User

#    Association Details
    getAssociationDetails(associationID: ID!): Association
    getAssociationStatistics(associationID: ID!): AssociationStatisticsDTO

    getAssociationRoles: [AssociationRole]!
    getAllWeapons(associationID: ID!): [Weapon]!
    getAllWeaponTypes(associationID: ID!): [WeaponType]!

    getWeaponMaintenancesBetween(associationID: ID!, startDate: LocalDateTime!, endDate: LocalDateTime!): GetWeaponMaintenancesDTO

    getAllColorPresets: [ColorPreset]
}

type Mutation {
    createAssociation: Association

#    Invites
    sendAssociationInvite(dto: CreateAssociationInviteInput!): SendAssociationInviteResponseDTO
    removeAssociationInvite(inviteId: AssociationInviteInput!): DefaultBooleanResponseDTO
    changeUserAssociation(changeUserAssociationDTO: ChangeUserAssociationDTO!): ChangeUserAssociationResponse
    removeUserAssociation(deleteUserAssociationDTO: DeleteUserAssociationDTO!): DefaultBooleanResponseDTO
    acceptAssociationInvite(inviteId: AssociationInviteInput!): DefaultBooleanResponseDTO
    rejectAssociationInvite(inviteId: AssociationInviteInput!): DefaultBooleanResponseDTO

#    User Profile
    updateMyProfile(dto: UpdateMyProfileDTO!) : DefaultBooleanResponseDTO
    updateMyProfilePicture(dto: ChangeProfilePictureDTO!) : DefaultBooleanResponseDTO

#    Association settings
    updateAssociationPicture(dto: ChangeProfilePictureDTO!, associationID: ID!): DefaultBooleanResponseDTO
    updateAssociationSettings(dto: UpdateAssociationDTO!, associationID: ID!): DefaultBooleanResponseDTO

#    Create Weapon
    createWeapon(dto: CreateWeaponDTO!, associationID: ID!): CreateWeaponResponseDTO

    #Weapon Maintenance
    createWeaponMaintenance(dto: CreateWeaponMaintenanceDTO!): CreateWeaponMaintenanceDTOResponse
    changeWeaponMaintenance(dto: ChangeWeaponMaintenanceDTO!): CreateWeaponMaintenanceDTOResponse
    deleteWeaponMaintenance(associationID: ID!,maintenanceID: ID!): DefaultBooleanResponseDTO
}
scalar LocalDateTime

type GetWeaponMaintenancesDTO {
    success: Boolean,
    maintenances: [WeaponMaintenance]
}

type WeaponMaintenance {
    id: ID!
    association: PrivateAssociation
    startDate: LocalDateTime
    endDate: LocalDateTime
    title: String
    colorPreset: ColorPreset
    description: String
    weapon: Weapon
}

type PrivateAssociation {
    id: ID!
    name: String!
}

type ColorPreset {
    id: ID!
    colorName: String!
    primaryColor: String!
    secondaryColor: String!
}


input ChangeUserAssociationDTO {
    userUUID: ID!
    associationUUID: ID!
    associationRoleUUID: ID!
}

input DeleteUserAssociationDTO {
    userUUID: ID!
    associationUUID: ID!
}

input CreateAssociationInviteInput {
    userEmail: String!
    associationUUID: ID!
    associationRoleUUID: ID!
}

input CreateWeaponDTO {
    weaponName: String!
    weaponType: ID!
    weaponStatus: String!
}

input AssociationInviteInput {
    userUUID: ID!
    associationUUID: ID!
}

type CreateWeaponMaintenanceDTOResponse {
    success: Boolean!
    message: String!
    maintenance: WeaponMaintenance
}

type ChangeUserAssociationResponse {
    success: Boolean!
    userAssociation: UserAssociation
}

type DefaultBooleanResponseDTO {
    success: Boolean!
    message: String
}

type CreateWeaponResponseDTO {
    success: Boolean!
    message: String
    weapon: Weapon
}

type SendAssociationInviteResponseDTO {
    success: Boolean!
    message: String
    associationInvite: AssociationInvite
}

input UpdateAssociationDTO {
    associationName: String!
    welcomeMessage: String!
    contactEmail: String!
}

input CreateWeaponMaintenanceDTO {
    weaponUUID: ID!
    colorPresetUUID: ID!
    title: String!
    description: String!
    associationUUID: ID!
    startDate: LocalDateTime!
    endDate: LocalDateTime!
}

input ChangeWeaponMaintenanceDTO {
    weaponUUID: ID!
    colorPresetUUID: ID!
    title: String!
    description: String!
    associationUUID: ID!
    weaponMaintenanceUUID: ID!
    startDate: LocalDateTime!
    endDate: LocalDateTime!
}


